/**
 * $ ./gradlew
 * The default task will build the project and run the test suite inside
 * your local spark environment (spark-submit must be on the PATH).
 *
 * TODO integrate https://github.com/kt3k/coveralls-gradle-plugin
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.maiflai:gradle-scalatest:0.9', 'org.scoverage:gradle-scoverage:1.0.9'
    }
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: 'scoverage'
apply plugin: 'idea'

group = 'com.uncharted'
version = '0.0.1'

project.ext {
    scalaBinaryVersion = '2.10'
    scalaVersion = '2.10.4'
    sparkVersion = '1.3.0'
    scoverageVersion = '1.1.1'
}

jar {
    baseName = 'mosaic'
    version =  version
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

checkScoverage {
    minimumRate = 1
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

task test(overwrite: true, type: Exec, dependsOn: [jarScoverage, testJar]) {
  executable = 'spark-submit'
  args = ["--jars","/opt/libs/scalatest_2.10-2.2.5.jar,/opt/libs/scalac-scoverage-runtime_2.10-1.1.1.jar,/opt/mosaic/build/libs/mosaic-${version}-scoverage.jar","--class","com.unchartedsoftware.mosaic.Main","build/libs/mosaic-${version}-tests.jar"]
}

task coverage(overwrite: true, dependsOn: test) << {
  reportScoverage.execute()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    provided
}

sourceSets {
  main { compileClasspath += configurations.provided }
  test { compileClasspath += configurations.provided }
  test { runtimeClasspath += configurations.provided }
  scoverage { compileClasspath += configurations.provided }
  testScoverage { compileClasspath += configurations.provided }
}

dependencies {
    //scala
    provided("org.scala-lang:scala-library:${scalaVersion}")

    //spark
    provided "org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}"
    provided "org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}"
    //provided "org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}"
    //provided "org.apache.spark:spark-graphx_${scalaBinaryVersion}:${sparkVersion}"
    //provided "org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkVersion}"
    provided "org.scala-lang:scala-library:$scalaBinaryVersion"

    //scalatest
    testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:2+"
    testRuntime 'org.pegdown:pegdown:1.1.0'

    //scoverage
    scoverage "org.scoverage:scalac-scoverage-plugin_${scalaBinaryVersion}:${scoverageVersion}",
            "org.scoverage:scalac-scoverage-runtime_${scalaBinaryVersion}:${scoverageVersion}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

//defaultTasks 'clean', 'assemble', 'testJar'
defaultTasks 'coverage', 'checkScoverage'
